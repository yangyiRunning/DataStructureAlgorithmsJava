Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 76568a701b830f5194c0820769624e3050fc69dc)
+++ b/README.md	(revision 714cecc24c7cf782b617ac5270f68c2a6089f985)
@@ -31,7 +31,6 @@
         - [顺序栈（基于数组实现的栈）](/src/main/java/ds/ArrayStack.java)
         - [链式栈（基于链表实现的栈）](/src/main/java/ds/LinkStack.java)
         - [有效的括号](/src/main/java/ds/ValidParentheses.java)
-        - [用两个栈实现一个队列](/src/main/java/ds/MyQueue.java)
         
     3. 队列
         - [顺序队列（基于数组实现的队列）](/src/main/java/ds/ArrayQueue.java)
@@ -276,7 +275,10 @@
       - [118.杨辉三角](/src/main/java/ds/dp/leetcode118/Solution.java)
       - [119.杨辉三角II](/src/main/java/ds/dp/leetcode119/Solution.java)
     
-18. 单调栈
+18. 栈
+    - [232.用栈实现队列](/src/main/java/ds/stack/leetcode232/MyQueue.java)
+
+19. 单调栈
     - [739.每日温度](/src/main/java/ds/stack/leetcode739/Solution.java)
       
 ## 多线程
Index: src/main/java/ds/MyQueue.java
===================================================================
diff --git a/src/main/java/ds/MyQueue.java b/src/main/java/ds/MyQueue.java
deleted file mode 100644
--- a/src/main/java/ds/MyQueue.java	(revision 76568a701b830f5194c0820769624e3050fc69dc)
+++ /dev/null	(revision 76568a701b830f5194c0820769624e3050fc69dc)
@@ -1,110 +0,0 @@
-package ds;
-
-import java.util.Stack;
-
-/**
- * 用两个栈实现一个队列
- * <p>
- * 使用栈实现队列的下列操作：
- * <p>
- * push(x) -- 将一个元素放入队列的尾部。
- * pop() -- 从队列首部移除元素。
- * peek() -- 返回队列首部的元素。
- * empty() -- 返回队列是否为空。
- * 示例:
- * <p>
- * MyQueue queue = new MyQueue();
- * <p>
- * queue.push(1);
- * queue.push(2);
- * queue.peek();  // 返回 1
- * queue.pop();   // 返回 1
- * queue.empty(); // 返回 false
- * 说明:
- * <p>
- * 你只能使用标准的栈操作 -- 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。
- * 你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。
- * 假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。
- *
- * @author yangyi 2019年02月11日16:11:01
- */
-public class MyQueue {
-
-    private Stack<Integer> stack1;
-    private Stack<Integer> stack2;
-
-    /**
-     * 初始化队列
-     */
-    public MyQueue() {
-        stack1 = new Stack<>();
-        stack2 = new Stack<>();
-    }
-
-    /**
-     * 入队
-     */
-    public void push(int x) {
-        stack1.push(x);
-    }
-
-    /**
-     * 出队
-     */
-    public int pop() {
-        if (stack2.isEmpty()) {
-            while (stack1.size() > 0) {
-                Integer target = stack1.peek();
-                stack2.push(target);
-                stack1.pop();
-            }
-        }
-
-        if (stack2.isEmpty()) {
-            return 0;
-        }
-
-        Integer result = stack2.peek();
-        stack2.pop();
-        return result;
-    }
-
-    /**
-     * 查看队头
-     */
-    public int peek() {
-        if (stack2.isEmpty()) {
-            while (stack1.size() > 0) {
-                Integer target = stack1.peek();
-                stack2.push(target);
-                stack1.pop();
-            }
-        }
-
-        if (stack2.isEmpty()) {
-            return 0;
-        }
-
-        return stack2.peek();
-    }
-
-    /**
-     * 返回是否为空
-     */
-    public boolean empty() {
-        return stack1.isEmpty() && stack2.isEmpty();
-    }
-
-    public static void main(String[] args) {
-        MyQueue queue = new MyQueue();
-        queue.push(1);
-        queue.push(2);
-        //返回 1
-        System.out.println(queue.peek());
-        //返回 1
-        System.out.println(queue.pop());
-        //返回 false
-        System.out.println(queue.empty());
-    }
-
-}
Index: src/main/java/ds/stack/leetcode232/MyQueue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ds/stack/leetcode232/MyQueue.java b/src/main/java/ds/stack/leetcode232/MyQueue.java
new file mode 100644
--- /dev/null	(revision 714cecc24c7cf782b617ac5270f68c2a6089f985)
+++ b/src/main/java/ds/stack/leetcode232/MyQueue.java	(revision 714cecc24c7cf782b617ac5270f68c2a6089f985)
@@ -0,0 +1,81 @@
+package ds.stack.leetcode232;
+
+import java.util.Stack;
+
+/**
+ * 用栈实现队列
+ * LeetCode 232 https://leetcode-cn.com/problems/implement-queue-using-stacks/
+ *
+ * @author yangyi 2021年07月09日17:53:18
+ */
+public class MyQueue {
+
+    private Stack<Integer> input;
+    private Stack<Integer> output;
+
+    /**
+     * Initialize your data structure here.
+     */
+    public MyQueue() {
+        input = new Stack<>();
+        output = new Stack<>();
+    }
+
+    /**
+     * Push element x to the back of queue.
+     */
+    public void push(int x) {
+        input.push(x);
+    }
+
+    /**
+     * Removes the element from in front of queue and returns that element.
+     */
+    public int pop() {
+        if (output.isEmpty()) {
+            while (!input.isEmpty()) {
+                int cur = input.pop();
+                output.push(cur);
+            }
+        }
+        return output.pop();
+    }
+
+    /**
+     * Get the front element.
+     */
+    public int peek() {
+        int res = pop();
+        output.push(res);
+        return res;
+    }
+
+    /**
+     * Returns whether the queue is empty.
+     */
+    public boolean empty() {
+        return input.isEmpty() && output.isEmpty();
+    }
+
+    /**
+     * Your MyQueue object will be instantiated and called as such:
+     * MyQueue obj = new MyQueue();
+     * obj.push(x);
+     * int param_2 = obj.pop();
+     * int param_3 = obj.peek();
+     * boolean param_4 = obj.empty();
+     */
+
+    public static void main(String[] args) {
+        MyQueue myQueue = new MyQueue();
+        myQueue.push(1); // queue is: [1]
+        myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
+        //return 1
+        System.out.println(myQueue.peek());
+        //return 1, queue is [2]
+        System.out.println(myQueue.pop());
+        //return false
+        System.out.println(myQueue.empty());
+    }
+
+}
